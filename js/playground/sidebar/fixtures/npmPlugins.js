define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allNPMPlugins = void 0;
    exports.allNPMPlugins = [
        {
            name: "Ts Scanner",
            id: "playground-ts-scanner",
            description: "See the results of the TypeScript Scanner on some code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-scanner",
        },
        {
            name: "Dt Review",
            id: "playground-dt-review",
            description: "Makes reviewing DefinitelyTyped PRs easier",
            author: "orta",
            href: "https://www.npmjs.com/package/playground-dt-review",
        },
        {
            name: "Live Transformer",
            id: "playground-live-transformer",
            description: "A plugin to create a TypeScript transformer live in the playground",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-live-transformer",
        },
        {
            name: "Collaborate",
            id: "playground-collaborate",
            description: "A simple way to live-code in the Playground with others.",
            author: "orta",
            href: "https://github.com/orta/playground-collaborate",
        },
        {
            name: "Codeblock Examples",
            id: "playground-plugin-codeblock-examples",
            description: "Use markdown codeblocks to demo many code samples in the playground",
            author: "orta",
            href: "https://www.npmjs.com/package/playground-plugin-codeblock-examples",
        },
        {
            name: "Clippy",
            id: "playground-clippy",
            description: "Finally, someone who has an answer for every problem in your Playground",
            author: "orta",
            href: "https://github.com/orta/playground-clippy",
        },
        {
            name: "Prettier",
            id: "ts-playground-plugin-prettier",
            description: "A simple button to make valid playground code Prettier!",
            author: "xavdid",
            href: "https://www.npmjs.com/package/ts-playground-plugin-prettier",
        },
        {
            name: "Link Shortener",
            id: "typescript-playground-link-shortener",
            description: "Create short-links for your current playground code and compiler settings",
            author: "gillchristian",
            href: "https://github.com/gillchristian/tsplay.dev",
        },
        {
            name: "Ts Transform Runtime Check",
            id: "playground-ts-transform-runtime-check",
            description: "A playground plugin for ts-transform-runtime-check",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-ts-transform-runtime-check",
        },
        {
            name: "Browser Fs",
            id: "playground-browser-fs",
            description: "Playground plugin to enable other plugins to use BrowserFS as filesystem",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-browser-fs",
        },
        {
            name: "Ts Symbols",
            id: "playground-ts-symbols",
            description: "Shows the compiler symbols which are created by your playground code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-symbols",
        },
        {
            name: "Vim",
            id: "ts-playground-plugin-vim",
            description: "Provides Vim keybindings for TypeScript Playground editor.",
            author: "quramy",
            href: "https://www.npmjs.com/package/ts-playground-plugin-vim",
        },
        {
            name: "@Type Challenges/plugin",
            id: "@type-challenges/playground-plugin",
            description: "Playground integration for Type Challenges",
            author: "antfu",
            href: "https://github.com/type-challenges/playground-type-challenges-plugin",
        },
        {
            name: "Planning Day",
            id: "planning-day",
            description: "TypeScript Playground plugin for planning an agile sprint or iteration by combining static type verification of configuration with a React Gantt chart visualization.",
            author: "jsuder",
            href: "https://github.com/JSuder-xx/planning-day",
        },
        {
            name: "Presentation Mode",
            id: "typescript-playground-presentation-mode",
            description: "Present your TypeScript talk directly in the playground, powered by GitHub gists!",
            author: "orta",
            href: "https://www.npmjs.com/package/typescript-playground-presentation-mode",
        },
        {
            name: "Dts Plugin",
            id: "playground-dts-plugin",
            description: "Generate d.ts from JS",
            author: "sanders_n",
            href: "https://www.npmjs.com/package/playground-dts-plugin",
        },
        {
            name: "Transformer Timeline",
            id: "playground-transformer-timeline",
            description: "Lets you see each stage of the transform process for a TypeScript JS + DTS emit as a timeline.",
            author: "orta",
            href: "https://github.com/orta/playground-transformer-timeline",
        },
        {
            name: "Code Show Flow",
            id: "playground-code-show-flow",
            description: "Visualize some of the Code Flow Analysis",
            author: "orta",
            href: "https://www.npmjs.com/package/playground-code-show-flow",
        },
        {
            name: "GitHub Explorer",
            id: "ts-playground-plugin-github-explorer",
            description: "Explore a GitHub repo on TypeScript playground",
            author: "emnudge",
            href: "https://www.npmjs.com/package/ts-playground-plugin-github-explorer",
        },
    ];
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtUGx1Z2lucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BsYXlncm91bmQvc3JjL3NpZGViYXIvZml4dHVyZXMvbnBtUGx1Z2lucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBQWEsUUFBQSxhQUFhLEdBQUc7UUFDM0I7WUFDRSxJQUFJLEVBQUUsWUFBWTtZQUNsQixFQUFFLEVBQUUsdUJBQXVCO1lBQzNCLFdBQVcsRUFBRSx3REFBd0Q7WUFDckUsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsK0NBQStDO1NBQ3REO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsV0FBVztZQUNqQixFQUFFLEVBQUUsc0JBQXNCO1lBQzFCLFdBQVcsRUFBRSw0Q0FBNEM7WUFDekQsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsb0RBQW9EO1NBQzNEO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsa0JBQWtCO1lBQ3hCLEVBQUUsRUFBRSw2QkFBNkI7WUFDakMsV0FBVyxFQUNULG9FQUFvRTtZQUN0RSxNQUFNLEVBQUUsUUFBUTtZQUNoQixJQUFJLEVBQUUsOERBQThEO1NBQ3JFO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsYUFBYTtZQUNuQixFQUFFLEVBQUUsd0JBQXdCO1lBQzVCLFdBQVcsRUFBRSwwREFBMEQ7WUFDdkUsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsZ0RBQWdEO1NBQ3ZEO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsb0JBQW9CO1lBQzFCLEVBQUUsRUFBRSxzQ0FBc0M7WUFDMUMsV0FBVyxFQUNULHFFQUFxRTtZQUN2RSxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxvRUFBb0U7U0FDM0U7UUFDRDtZQUNFLElBQUksRUFBRSxRQUFRO1lBQ2QsRUFBRSxFQUFFLG1CQUFtQjtZQUN2QixXQUFXLEVBQ1QseUVBQXlFO1lBQzNFLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLDJDQUEyQztTQUNsRDtRQUNEO1lBQ0UsSUFBSSxFQUFFLFVBQVU7WUFDaEIsRUFBRSxFQUFFLCtCQUErQjtZQUNuQyxXQUFXLEVBQUUseURBQXlEO1lBQ3RFLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSw2REFBNkQ7U0FDcEU7UUFDRDtZQUNFLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsRUFBRSxFQUFFLHNDQUFzQztZQUMxQyxXQUFXLEVBQ1QsMkVBQTJFO1lBQzdFLE1BQU0sRUFBRSxlQUFlO1lBQ3ZCLElBQUksRUFBRSw2Q0FBNkM7U0FDcEQ7UUFDRDtZQUNFLElBQUksRUFBRSw0QkFBNEI7WUFDbEMsRUFBRSxFQUFFLHVDQUF1QztZQUMzQyxXQUFXLEVBQUUsb0RBQW9EO1lBQ2pFLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFDRix3RUFBd0U7U0FDM0U7UUFDRDtZQUNFLElBQUksRUFBRSxZQUFZO1lBQ2xCLEVBQUUsRUFBRSx1QkFBdUI7WUFDM0IsV0FBVyxFQUNULDBFQUEwRTtZQUM1RSxNQUFNLEVBQUUsUUFBUTtZQUNoQixJQUFJLEVBQUUsd0RBQXdEO1NBQy9EO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsWUFBWTtZQUNsQixFQUFFLEVBQUUsdUJBQXVCO1lBQzNCLFdBQVcsRUFDVCxzRUFBc0U7WUFDeEUsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsK0NBQStDO1NBQ3REO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsS0FBSztZQUNYLEVBQUUsRUFBRSwwQkFBMEI7WUFDOUIsV0FBVyxFQUFFLDREQUE0RDtZQUN6RSxNQUFNLEVBQUUsUUFBUTtZQUNoQixJQUFJLEVBQUUsd0RBQXdEO1NBQy9EO1FBQ0Q7WUFDRSxJQUFJLEVBQUUseUJBQXlCO1lBQy9CLEVBQUUsRUFBRSxvQ0FBb0M7WUFDeEMsV0FBVyxFQUFFLDRDQUE0QztZQUN6RCxNQUFNLEVBQUUsT0FBTztZQUNmLElBQUksRUFDRixzRUFBc0U7U0FDekU7UUFDRDtZQUNFLElBQUksRUFBRSxjQUFjO1lBQ3BCLEVBQUUsRUFBRSxjQUFjO1lBQ2xCLFdBQVcsRUFDVCx1S0FBdUs7WUFDekssTUFBTSxFQUFFLFFBQVE7WUFDaEIsSUFBSSxFQUFFLDJDQUEyQztTQUNsRDtRQUNEO1lBQ0UsSUFBSSxFQUFFLG1CQUFtQjtZQUN6QixFQUFFLEVBQUUseUNBQXlDO1lBQzdDLFdBQVcsRUFDVCxtRkFBbUY7WUFDckYsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQ0YsdUVBQXVFO1NBQzFFO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsWUFBWTtZQUNsQixFQUFFLEVBQUUsdUJBQXVCO1lBQzNCLFdBQVcsRUFBRSx1QkFBdUI7WUFDcEMsTUFBTSxFQUFFLFdBQVc7WUFDbkIsSUFBSSxFQUFFLHFEQUFxRDtTQUM1RDtRQUNEO1lBQ0UsSUFBSSxFQUFFLHNCQUFzQjtZQUM1QixFQUFFLEVBQUUsaUNBQWlDO1lBQ3JDLFdBQVcsRUFDVCxnR0FBZ0c7WUFDbEcsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUseURBQXlEO1NBQ2hFO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLEVBQUUsRUFBRSwyQkFBMkI7WUFDL0IsV0FBVyxFQUFFLDBDQUEwQztZQUN2RCxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSx5REFBeUQ7U0FDaEU7UUFDRDtZQUNFLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsRUFBRSxFQUFFLHNDQUFzQztZQUMxQyxXQUFXLEVBQUUsZ0RBQWdEO1lBQzdELE1BQU0sRUFBRSxTQUFTO1lBQ2pCLElBQUksRUFBRSxvRUFBb0U7U0FDM0U7S0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGFsbE5QTVBsdWdpbnMgPSBbXG4gIHtcbiAgICBuYW1lOiBcIlRzIFNjYW5uZXJcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLXRzLXNjYW5uZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTZWUgdGhlIHJlc3VsdHMgb2YgdGhlIFR5cGVTY3JpcHQgU2Nhbm5lciBvbiBzb21lIGNvZGVcIixcbiAgICBhdXRob3I6IFwib3J0YVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL29ydGEvcGxheWdyb3VuZC10cy1zY2FubmVyXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkR0IFJldmlld1wiLFxuICAgIGlkOiBcInBsYXlncm91bmQtZHQtcmV2aWV3XCIsXG4gICAgZGVzY3JpcHRpb246IFwiTWFrZXMgcmV2aWV3aW5nIERlZmluaXRlbHlUeXBlZCBQUnMgZWFzaWVyXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BsYXlncm91bmQtZHQtcmV2aWV3XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkxpdmUgVHJhbnNmb3JtZXJcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLWxpdmUtdHJhbnNmb3JtZXJcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiQSBwbHVnaW4gdG8gY3JlYXRlIGEgVHlwZVNjcmlwdCB0cmFuc2Zvcm1lciBsaXZlIGluIHRoZSBwbGF5Z3JvdW5kXCIsXG4gICAgYXV0aG9yOiBcImtldnJhbVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL2tldmlucmFtaGFyYWsvcGxheWdyb3VuZC1saXZlLXRyYW5zZm9ybWVyXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNvbGxhYm9yYXRlXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1jb2xsYWJvcmF0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkEgc2ltcGxlIHdheSB0byBsaXZlLWNvZGUgaW4gdGhlIFBsYXlncm91bmQgd2l0aCBvdGhlcnMuXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcnRhL3BsYXlncm91bmQtY29sbGFib3JhdGVcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQ29kZWJsb2NrIEV4YW1wbGVzXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1wbHVnaW4tY29kZWJsb2NrLWV4YW1wbGVzXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIlVzZSBtYXJrZG93biBjb2RlYmxvY2tzIHRvIGRlbW8gbWFueSBjb2RlIHNhbXBsZXMgaW4gdGhlIHBsYXlncm91bmRcIixcbiAgICBhdXRob3I6IFwib3J0YVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGxheWdyb3VuZC1wbHVnaW4tY29kZWJsb2NrLWV4YW1wbGVzXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNsaXBweVwiLFxuICAgIGlkOiBcInBsYXlncm91bmQtY2xpcHB5XCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIkZpbmFsbHksIHNvbWVvbmUgd2hvIGhhcyBhbiBhbnN3ZXIgZm9yIGV2ZXJ5IHByb2JsZW0gaW4geW91ciBQbGF5Z3JvdW5kXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcnRhL3BsYXlncm91bmQtY2xpcHB5XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlByZXR0aWVyXCIsXG4gICAgaWQ6IFwidHMtcGxheWdyb3VuZC1wbHVnaW4tcHJldHRpZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBIHNpbXBsZSBidXR0b24gdG8gbWFrZSB2YWxpZCBwbGF5Z3JvdW5kIGNvZGUgUHJldHRpZXIhXCIsXG4gICAgYXV0aG9yOiBcInhhdmRpZFwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtcGxheWdyb3VuZC1wbHVnaW4tcHJldHRpZXJcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGluayBTaG9ydGVuZXJcIixcbiAgICBpZDogXCJ0eXBlc2NyaXB0LXBsYXlncm91bmQtbGluay1zaG9ydGVuZXJcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiQ3JlYXRlIHNob3J0LWxpbmtzIGZvciB5b3VyIGN1cnJlbnQgcGxheWdyb3VuZCBjb2RlIGFuZCBjb21waWxlciBzZXR0aW5nc1wiLFxuICAgIGF1dGhvcjogXCJnaWxsY2hyaXN0aWFuXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vZ2lsbGNocmlzdGlhbi90c3BsYXkuZGV2XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlRzIFRyYW5zZm9ybSBSdW50aW1lIENoZWNrXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC10cy10cmFuc2Zvcm0tcnVudGltZS1jaGVja1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkEgcGxheWdyb3VuZCBwbHVnaW4gZm9yIHRzLXRyYW5zZm9ybS1ydW50aW1lLWNoZWNrXCIsXG4gICAgYXV0aG9yOiBcImtldnJhbVwiLFxuICAgIGhyZWY6XG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnJhbWhhcmFrL3BsYXlncm91bmQtdHMtdHJhbnNmb3JtLXJ1bnRpbWUtY2hlY2tcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiQnJvd3NlciBGc1wiLFxuICAgIGlkOiBcInBsYXlncm91bmQtYnJvd3Nlci1mc1wiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJQbGF5Z3JvdW5kIHBsdWdpbiB0byBlbmFibGUgb3RoZXIgcGx1Z2lucyB0byB1c2UgQnJvd3NlckZTIGFzIGZpbGVzeXN0ZW1cIixcbiAgICBhdXRob3I6IFwia2V2cmFtXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20va2V2aW5yYW1oYXJhay9wbGF5Z3JvdW5kLWJyb3dzZXItZnNcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVHMgU3ltYm9sc1wiLFxuICAgIGlkOiBcInBsYXlncm91bmQtdHMtc3ltYm9sc1wiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJTaG93cyB0aGUgY29tcGlsZXIgc3ltYm9scyB3aGljaCBhcmUgY3JlYXRlZCBieSB5b3VyIHBsYXlncm91bmQgY29kZVwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLXRzLXN5bWJvbHNcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVmltXCIsXG4gICAgaWQ6IFwidHMtcGxheWdyb3VuZC1wbHVnaW4tdmltXCIsXG4gICAgZGVzY3JpcHRpb246IFwiUHJvdmlkZXMgVmltIGtleWJpbmRpbmdzIGZvciBUeXBlU2NyaXB0IFBsYXlncm91bmQgZWRpdG9yLlwiLFxuICAgIGF1dGhvcjogXCJxdXJhbXlcIixcbiAgICBocmVmOiBcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RzLXBsYXlncm91bmQtcGx1Z2luLXZpbVwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJAVHlwZSBDaGFsbGVuZ2VzL3BsdWdpblwiLFxuICAgIGlkOiBcIkB0eXBlLWNoYWxsZW5nZXMvcGxheWdyb3VuZC1wbHVnaW5cIixcbiAgICBkZXNjcmlwdGlvbjogXCJQbGF5Z3JvdW5kIGludGVncmF0aW9uIGZvciBUeXBlIENoYWxsZW5nZXNcIixcbiAgICBhdXRob3I6IFwiYW50ZnVcIixcbiAgICBocmVmOlxuICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vdHlwZS1jaGFsbGVuZ2VzL3BsYXlncm91bmQtdHlwZS1jaGFsbGVuZ2VzLXBsdWdpblwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJQbGFubmluZyBEYXlcIixcbiAgICBpZDogXCJwbGFubmluZy1kYXlcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiVHlwZVNjcmlwdCBQbGF5Z3JvdW5kIHBsdWdpbiBmb3IgcGxhbm5pbmcgYW4gYWdpbGUgc3ByaW50IG9yIGl0ZXJhdGlvbiBieSBjb21iaW5pbmcgc3RhdGljIHR5cGUgdmVyaWZpY2F0aW9uIG9mIGNvbmZpZ3VyYXRpb24gd2l0aCBhIFJlYWN0IEdhbnR0IGNoYXJ0IHZpc3VhbGl6YXRpb24uXCIsXG4gICAgYXV0aG9yOiBcImpzdWRlclwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL0pTdWRlci14eC9wbGFubmluZy1kYXlcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUHJlc2VudGF0aW9uIE1vZGVcIixcbiAgICBpZDogXCJ0eXBlc2NyaXB0LXBsYXlncm91bmQtcHJlc2VudGF0aW9uLW1vZGVcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiUHJlc2VudCB5b3VyIFR5cGVTY3JpcHQgdGFsayBkaXJlY3RseSBpbiB0aGUgcGxheWdyb3VuZCwgcG93ZXJlZCBieSBHaXRIdWIgZ2lzdHMhXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOlxuICAgICAgXCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS90eXBlc2NyaXB0LXBsYXlncm91bmQtcHJlc2VudGF0aW9uLW1vZGVcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiRHRzIFBsdWdpblwiLFxuICAgIGlkOiBcInBsYXlncm91bmQtZHRzLXBsdWdpblwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkdlbmVyYXRlIGQudHMgZnJvbSBKU1wiLFxuICAgIGF1dGhvcjogXCJzYW5kZXJzX25cIixcbiAgICBocmVmOiBcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3BsYXlncm91bmQtZHRzLXBsdWdpblwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJUcmFuc2Zvcm1lciBUaW1lbGluZVwiLFxuICAgIGlkOiBcInBsYXlncm91bmQtdHJhbnNmb3JtZXItdGltZWxpbmVcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiTGV0cyB5b3Ugc2VlIGVhY2ggc3RhZ2Ugb2YgdGhlIHRyYW5zZm9ybSBwcm9jZXNzIGZvciBhIFR5cGVTY3JpcHQgSlMgKyBEVFMgZW1pdCBhcyBhIHRpbWVsaW5lLlwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLXRyYW5zZm9ybWVyLXRpbWVsaW5lXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNvZGUgU2hvdyBGbG93XCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1jb2RlLXNob3ctZmxvd1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlZpc3VhbGl6ZSBzb21lIG9mIHRoZSBDb2RlIEZsb3cgQW5hbHlzaXNcIixcbiAgICBhdXRob3I6IFwib3J0YVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcGxheWdyb3VuZC1jb2RlLXNob3ctZmxvd1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHaXRIdWIgRXhwbG9yZXJcIixcbiAgICBpZDogXCJ0cy1wbGF5Z3JvdW5kLXBsdWdpbi1naXRodWItZXhwbG9yZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJFeHBsb3JlIGEgR2l0SHViIHJlcG8gb24gVHlwZVNjcmlwdCBwbGF5Z3JvdW5kXCIsXG4gICAgYXV0aG9yOiBcImVtbnVkZ2VcIixcbiAgICBocmVmOiBcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RzLXBsYXlncm91bmQtcGx1Z2luLWdpdGh1Yi1leHBsb3JlclwiLFxuICB9LFxuXTtcbiJdfQ==